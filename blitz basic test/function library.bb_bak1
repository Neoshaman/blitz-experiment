


.drawing ;------------------------------------------- drawing

Function makeQuad(division, size#=1)

	quad = CreateMesh()
	surface = CreateSurface (quad)
	
	division = division +1
	d2 = division*division
	S# = size/(division-1);step size
		
	
	;center = 0 -> corner, center = 1 -> center offset
	center = 1
	offset# = 0:	If center = 1 Then offset = - (size) / 2

	offset_u# = 0
	offset_v# = 0
	
	
	For i=0 To d2;

	;generate vertex position, depend on axis xz=0, xy=1, zy=2
			x# = offset + ( i Mod division )*s
			y# = offset + ( i/division )*s ;( i/s )
			z# = 0
			
				;uv
			u# = offset_u + x / division / (size/division) ;
			v# = offset_v + y / division / (size/division) ;
			w# = 0
	
		AddVertex (surface, x,y,z,  u,-v,w)
	
	;generate triangle (independant from vertex generation but need to correlate at the end)
		w1 = i
		w2 = i+1
		w3 = i+division +1
		w4 = i+division 
		
		If i Mod division = division -1 Then Goto skip
		If i => d2 - division Then Goto skip
					
		AddTriangle (surface, w1,w3,w2)
		AddTriangle (surface, w1,w4,w3)
	
		.skip		
	Next	

	UpdateNormals quad
	Return quad
	
End Function

Function makePlane(size_x,size_y, tilesize#=1, axis=1, center=0)
	
	size_x = size_x+1
	size_y = size_y+1
	
	; row enumeration (size_x)
	size_total = size_x * size_y -1
	
	plane = CreateMesh()
	surface = CreateSurface (plane)
		
	;center = 0 -> corner, center = 1 -> center offset
	offset# = 0
	
	If center = 1 Then offset = -( (size_x-1) * tilesize ) / 2

	offset_u# = 0
	offset_v# = 0
	
	;______________________________________________________ loop
	For i=0 To size_total ;

	;generate vertex position, depend on axis xz=0, xy=1, zy=2
		Select axis
			;__________________________________________
			Case 0;xz floor
			x# = offset + ( i Mod size_x )	*tilesize
			z# = offset + ( i/size_x )		*tilesize
			y# = 0
				;uv
			u# = offset_u + x / tilesize / (size_x-1) ;
			v# = offset_v + z / tilesize / (size_x-1) ;
			w# = 0
			;__________________________________________
			Case 1;xy forward wall
			x# = offset + ( i Mod size_x )	*tilesize
			y# = offset + ( i/size_x )		*tilesize
			z# = 0
				;uv
			u# = offset_u + x / tilesize / (size_x-1) ;
			v# = offset_v + y / tilesize / (size_x-1) ;
			w# = 0
			;__________________________________________
			Case 2;zy side wall
			z# = offset + ( i Mod size_x )	*tilesize
			y# = offset + ( i/size_x )		*tilesize
			x# = 0
				;uv
			u# = offset_u + z / tilesize / (size_x-1) ;
			v# = offset_v + y / tilesize / (size_x-1) ;
			w# = 0
			;__________________________________________
		End Select	
	
		AddVertex (surface, x,y,z,  u,-v,w)
	
	;generate triangle (independant from vertex generation but need to correlate at the end)
		w1 = i
		w2 = i+1
		w3 = i+size_x +1
		w4 = i+size_x 
		
		If i Mod size_x = size_x-1 Then Goto skip
		If i => size_total-size_x Then Goto skip
					
		AddTriangle (surface, w1,w3,w2)
		AddTriangle (surface, w1,w4,w3)
	
		.skip	
		
	Next	
	;______________________________________________________ /loop

	UpdateNormals plane
	Return plane

End Function

Function makecube(size#=1)
	
	size = size/2
	cube = CreateMesh ()
	c = makequad(10)
	
	cu	= CopyMesh (c): RotateMesh cu,  90,0,0: PositionMesh cu, 0, size,0
	cd	= CopyMesh (c): RotateMesh cd, -90,0,0: PositionMesh cd, 0,-size,0
	
	cl	= CopyMesh (c): RotateMesh cl, 0, 90,0: PositionMesh cl,  size,0,0
	cr	= CopyMesh (c): RotateMesh cr, 0,-90,0: PositionMesh cr, -size,0,0
	
	cf	= CopyMesh (c): RotateMesh cf, 0,180,0: PositionMesh cf, 0,0, size
	cb	= CopyMesh (c): RotateMesh cb, 0,000,0: PositionMesh cb, 0,0,-size


	copysurface (cu, cube)
	copysurface (cd, cube)

	copysurface (cl, cube)
	copysurface (cr, cube)

	copysurface (cf, cube)
	copysurface (cb, cube)
		
	FreeEntity c
	
	FreeEntity cu
	FreeEntity cd

	FreeEntity cl
	FreeEntity cr

	FreeEntity cf
	FreeEntity cb
	
	UpdateNormals cube
	Return cube
	
End Function

Function makesphere()

	sphere = makecube()
	
	;surface = GetSurface (sphere,1)
	For j = 1 To CountSurfaces (sphere)
		For i =0 To CountVertices (GetSurface (sphere,j))-1
			catsphere(GetSurface (sphere,j),i)
		Next
	Next
	
	UpdateNormals sphere
	Return sphere
	
End Function

Function catsphere(surface,i, radius# = 1)
	
	;method with no deformation around the pole
	;_____________________________________________________________

	x# = VertexX (surface,i) *2
	y# = VertexY (surface,i) *2
	z# = VertexZ (surface,i) *2
	
	
	x2# = x*x
	y2# = y*y
	z2# = z*z
	
	a# = (x2 / 2.0)
	b# = (y2 / 2.0)
	c# = (z2 / 2.0)
	
	sx# =  Sqr(1.0 - b - c + ( (y2 * z2) / 3.0 ) ) * x / 2
	sy# =  Sqr(1.0 - c - a + ( (x2 * z2) / 3.0 ) ) * y / 2
	sz# =  Sqr(1.0 - a - b + ( (x2 * y2) / 3.0 ) ) * z / 2
	
	;sx# = x * Sqr(1 - (y2 / 2) - (z2 / 2) + ((y2 * z2) / 3))
	;sy# = y * Sqr(1 - (x2 / 2) - (z2 / 2) + ((x2 * z2) / 3))
	;sz# = z * Sqr(1 - (x2 / 2) - (y2 / 2) + ((x2 * y2) / 3))
	
	sx# = sx*radius
	sy# = sy*radius
	sz# = sz*radius
	;_____________________________________________________________
	
	
	;naive method with deformation around pole
	;sx = normalizeX3D(x,y,z)*radius/2
	;sy = normalizeY3D(x,y,z)*radius/2
	;sz = normalizeZ3D(x,y,z)*radius/2
	
	VertexCoords surface, i, sx,sy,sz

End Function

Function Copysurface (source, target)

	surface = CreateSurface(target) 
	copy = GetSurface(source, 1)
	
	For i = 0 To CountVertices (copy)-1
		AddVertex ( surface, VertexX(copy,i),VertexY(copy,i),VertexZ(copy,i), VertexU(copy,i),VertexV(copy,i),VertexW(copy,i) )
	Next

	For i = 0 To CountTriangles (copy)-1
		AddTriangle (surface, TriangleVertex (copy,i,0),TriangleVertex (copy,i,1),TriangleVertex (copy,i,2) )
	Next
	
End Function 

Function Circle(x#,y#, radius#);draw circle on screen
	Oval x-radius*0.5, y-radius*0.5,  radius,radius,0
	Plot x,y
End Function

.datastructure ;------------------------------------------- DataStructure

Type point3d
	Field x#
	Field y#
	Field z#
End Type

Function t()	;fonction prototype
	Return
End Function

.math ;------------------------------------------- mathUtils

Function lerp# (a#,b#,t#=0.5)
	Return (1-t)*a + b*t
End Function

Function remap# (x#,t1#,t2#, s1#,s2#); remap interval t into s
	r1# = (x-t1)/(t2-t1)
	r2# = r1*(s2-s1)+s1
	Return r2
End Function

Function magnitude#(x#,y#)
	Return Sqr ((x*x) + (y*y))
End Function
Function magnitude3D#(x#,y#,z#)
	Return Sqr ((x*x) + (y*y) + (z*z))
End Function

Function normalizeX#(x#,y#)
	Return x/magnitude(x,y)
End Function
Function normalizeY#(x#,y#)
	Return y/magnitude(x,y)
End Function
Function normalizeX3D#(x#,y#,z#)
	Return x/magnitude3D(x,y,z)
End Function
Function normalizeY3D#(x#,y#,z#)
	Return y/magnitude3D(x,y,z)
End Function
Function normalizeZ3D#(x#,y#,z#)
	Return z/magnitude3D(x,y,z)
End Function
Function normalizepoint3d.point3d(p.point3d)
	m# = magnitude3d (p\x,p\y,p\z)

	p\x = p\x/m
	p\y = p\y/m
	p\z = p\z/m
	
	Return p
End Function

Function dot2d#(x1#,y1#,x2#,y2#)
	Return x1*x2 + y1*y2
End Function

Function crossx#(ax#,ay#,az#, bx#,by#,bz#)
	cx# = ay*bz - az*by
	Return cx
End Function
Function crossy#(ax#,ay#,az#, bx#,by#,bz#)
	cy# = az*bx - ax*bz
	Return cy
End Function
Function crossz#(ax#,ay#,az#, bx#,by#,bz#)
	cz# = ax*by - ay*bx
	Return cz
End Function

Function vectorprojectx#(x1#,y1#, x2#,y2#)	;1 onto 2
	p = dot2d(x1,y1, x2,y2)
	b = magnitude(x2,y2)
	b2 = b*b
	p = p/b2
	p = p*x2
	Return p ; not sure code is good
End Function
Function vectorprojecty#(x1#,y1#, x2#,y2#)	;1 onto 2
	p = dot2d(x1,y1, x2,y2)
	
	b = magnitude(x2,y2)
	b2 = b*b
	;alt b = dot(x2,y2, x2,y2)
	p = p/b2; p/ alt b
	p = p*y2
	Return p ; not sure code is good
End Function

;reflection 
;Vreflect = v -2 *VprojectedOnNormal


Function Chebyshev (x1,y1, x2=0, y2=0);chess distance
	Return max( Abs(x1-x2), Abs(y1-y2) )
End Function


Function max (a,b)

	If a > b Then
		Return a
	Else 
		Return b
	EndIf 
	
End Function

Function powerof2step(x)
	;which step you are on : int 1 =
	Return Floor (Log (x)/Log(2) )
	;height of that step, float h = pow(2,i)
End Function

Function checkCubeDirection()
	
End Function

Function SphereToCube.point3D(px#,py#,pz#)
;http://stackoverflow.com/questions/2656899/mapping-a-sphere-to-a-cube

	x# = px
	y# = py
	z# = pz
	
	;absolute value of coordinate
	fx# = Abs(x)
	fy# = Abs(y)
	fz# = Abs(z)
	
	inverseSQRT2# = 0.70710676908493042
	
	If fy => fx And fy => fz Then
		a2# = x*x*2
		b2# = z*z*2
		inner# = -a2+b2-3
		innerSQRT# = -Sqr((inner*inner) - 12*a2)
		
		If x = 0 Or x =-0 Then
			px = 0
		Else
			px = Sqr(innerSQRT +a2 - b2 +3)* inverseSQRT2 
		EndIf
		
		If z = 0 Or z =-0 Then
			pz = 0
		Else
			pz = Sqr(innerSQRT -a2 + b2 +3)* inverseSQRT2 
		EndIf

		If px > 1 Then px = 1
		If pz > 1 Then pz = 1
		
		If x < 0 Then px = -px
		If z < 0 Then pz = -pz
		
		If y > 0 Then
			py = 1;top face
		Else
			py = -1;bottom face
		EndIf
	ElseIf fx => fy And fx => fz Then
		a2# = y*y*2
		b2# = z*z*2
		inner# = -a2+b2-3
		innerSQRT# = -Sqr((inner*inner) - 12*a2)
		
		If y = 0 Or y =-0 Then
			py = 0
		Else
			py = Sqr(innerSQRT +a2 - b2 +3)* inverseSQRT2 
		EndIf
		
		If z = 0 Or z =-0 Then
			pz = 0
		Else
			pz = Sqr(innerSQRT -a2 + b2 +3)* inverseSQRT2 
		EndIf

		If py > 1 Then py = 1
		If pz > 1 Then pz = 1
		
		If y < 0 Then py = -py
		If z < 0 Then pz = -pz
		
		If x > 0 Then
			px = 1;right face
		Else
			px = -1;left face
		EndIf
	Else
		a2# = x*x*2
		b2# = y*y*2
		inner# = -a2+b2-3
		innerSQRT# = -Sqr((inner*inner) - 12*a2)
		
		If x = 0 Or x =-0 Then
			px = 0
		Else
			px = Sqr(innerSQRT +a2 - b2 +3)* inverseSQRT2 
		EndIf
		
		If y = 0 Or y =-0 Then
			py = 0
		Else
			py = Sqr(innerSQRT -a2 + b2 +3)* inverseSQRT2 
		EndIf

		If px > 1 Then px = 1
		If py > 1 Then py = 1
		
		If x < 0 Then px = -px
		If y < 0 Then py = -py
		
		If z > 0 Then
			pz =  1;front face
		Else
			pz = -1;back face
		EndIf
	EndIf
	
	position.point3d = New point3d
	position\x = px
	position\y = py
	position\z = pz
	
	Return position

End Function

.sphereFunction ;------------------------------------------- sphereFunction

Function spherearea#(radius#)
	Return 4*Pi*radius
End Function

Function spherevolume#(radius#)
	Return (4/3)*Pi*radius^3
End Function

Function spherearea2radius#(area#)
	Return Sqr(area/Pi)*0.5
End Function


.circleFunction ;------------------------------------------- circle function

Function circlearclength#(radius#, radangle)
	Return radangle*radius
End Function

Function deg2rad#(degree#)
	Return  (degree/360)*2*Pi
End Function

Function circlearea#(radius#)
	Return Pi*radius^2
End Function

Function circleCircum2radius#(circum#)
	Return circum/(2*Pi)
End Function

Function circlearea2radius#(area#)
	Return Sqr(area/Pi)
End Function

Function circumference#(radius#)
	Return 2*Pi*radius
End Function

.controller ;------------------------------------------- control

Function Controlentity(entity, speed=1, turnrate=1)
	;key translation
		;l/r	x axis
	If KeyDown(32) Then MoveEntity entity,  speed,0,0	;d
	If KeyDown(30) Then MoveEntity entity, -speed,0,0	;q
		;u/d	y axis
	If KeyDown(16) Then MoveEntity entity, 0, speed,0	;a
	If KeyDown(18) Then MoveEntity entity, 0,-speed,0	;e
		;f/b	z axis
	If KeyDown(17) Then MoveEntity entity, 0,0, speed	;z
	If KeyDown(31) Then MoveEntity entity, 0,0,-speed	;s
	
	;key rotation
		;roll
	If KeyDown(23) Then TurnEntity entity,  turnrate,0,0	;i
	If KeyDown(37) Then TurnEntity entity, -turnrate,0,0	;k
		;pitch
	If KeyDown(36) Then TurnEntity entity, 0, turnrate,0	;j
	If KeyDown(38) Then TurnEntity entity, 0,-turnrate,0	;l
		;yaw
	If KeyDown(22) Then TurnEntity entity, 0,0, turnrate	;u
	If KeyDown(24) Then TurnEntity entity, 0,0,-turnrate	;o

	;mice
	;TurnEntity entity, 0,MouseY(), MouseX() ;faulty take absolute position
	;TurnEntity entity, MouseYSpeed(), -MouseXSpeed(),0;faulty 
	
	
	;controller
	
	If JoyXDir() <> 0 Then MoveEntity entity,	JoyX(),0,0 ;lr
	If JoyYDir() <> 0 Then MoveEntity entity,	0,0,-JoyY();fb
	If JoyZDir() <> 0 Then TurnEntity entity,	0,0, JoyZ();roll
 
	;yaw = up down
	;pitch = lr
	If Abs(JoyYaw ()/180) > .2 Then TurnEntity entity, (JoyYaw ()/180), 0,0;roll
	If Abs(JoyPitch()/180) > .2 Then TurnEntity entity, 0,-JoyPitch()/180, 0;pitch
	
	;going up-down: y-a
		
	got = GetJoy()
	If got <> 0 Then button = got
	Select got
		Case 1:MoveEntity entity, 0,  speed,0;a - down
		Case 2:WireFrame True;b
		Case 3:WireFrame False;x
		Case 4:MoveEntity entity, 0, -speed,0;y - up
		
		Case 5;rb
		Case 6;lb
		
		Case 7:PositionEntity entity, 0,0,0: RotateEntity entity, 0,0,0;select - reset
		Case 8:ClearWorld:End;start
		
		Case 9;l3
		Case 10;r3
	End Select

End Function

Function showjoystate(o=0)
	Text 000,000+o, JoyType()
	Text 000,020+o, button 
	
	Text 000,040+o, "JoyX     :"+ JoyX();l stick analog x360
	Text 000,060+o, "JoyY     :"+ JoyY();l stick analog
	Text 000,080+o, "JoyZ     :"+ JoyZ();trigger analog
	Text 000,100+o, "JoyU     :"+ JoyU();none
	Text 000,120+o, "JoyV     :"+ JoyV();none

	Text 000,140+o, "JoyXDir  :"+ JoyXDir();l stick digital
	Text 000,160+o, "JoyYDir  :"+ JoyYDir();l stick digital
	Text 000,180+o, "JoyZDir  :"+ JoyZDir();trigger digital
	Text 000,200+o, "JoyUDir  :"+ JoyUDir();none
	Text 000,220+o, "JoyVDir  :"+ JoyVDir();none

	Text 000,240+o, "JoyPitch :"+ JoyPitch()	;r stick angle
	Text 000,260+o, "JoyYaw   :"+ JoyYaw()		;r stick angle
	Text 000,280+o, "JoyRoll  :"+ JoyRoll()		;none
	Text 000,300+o, "JoyHat   :"+ JoyHat()		;dpad angle
	
	Text 000,340+o, Abs(JoyPitch ()/180)

	
	got = GetJoy()
	If got <> 0 Then button = got
	;a 1
	;b 2
	;x 3
	;y 4
	
	;rb 6
	;lb 5
	
	;select 7
	;start 8

	;l3 9
	;r3 10
End Function




.camera ;------------------------------------------- camera

Function SetCameraFov(camera, FoV#)
	CameraZoom camera, 1.0/Tan(FoV/2.0)
End Function

;experimental not validated
Function pixelCoverage(height#, distance#, fov#)
	Return (height/distance)/2.0 * Tan(fov/2.0)*GraphicsHeight()
End Function


.randomUtil ;------------------------------------------- random generation util

Function Hashseed(i,j)
			width = (i*10000) + (j*100)
			Return (1 + (i*width) + (j*width*width) )
End Function
.region ;------------------------------------------- region subdivision

Function regionCut(width, height, posx, posy, division, depth=1)
	
	If width < division Then Return
	If height < division Then Return
	If division < division Then Return

;Print depth
	
	width = width/division
	height = height/division
	
	ax = ( posx/width ) * width
	ay = ( posy/height ) * height
	
	Rect ax, ay, width, height, False
	
	If Not depth = 0 Then regionCut (width, height, posx, posy, division, depth-1)
	
End Function


Function regiondraw(width, height, posx, posy, division, x=00, y=00, depth=4, divide =1)
	
	If width    < division Then Return
	If height   < division Then Return
	If division < division Then Return

	width  = width  / division
	height = height / division
	
;posx = psx Mod width
;posy = posy Mod height
	ax = ( (posx-x) / width ) *width
	ay = ( (posy-y) / height) *height
	
	Rect ax+x, ay+y, width, height, False
	;If Not depth = 0 Then regionLod (width, height, posx, posy, division, depth-1)
	;If Not depth = 0 Then regiondraw(width, height, posx,posy, division,i,j, depth-1, divide+1)
	
	If Not depth = 0 Then regiondraw(width, height, posx,posy, division, ax+x,ay+y, depth-1, divide+1)

	Color ColorRed(), ColorGreen()/divide, ColorBlue()/divide
			Locate MouseX()-4*-divide, MouseY()-12*-divide
			Print ax+ " / " + ay +"  :"+divide+" "+(posx-x)+" "+(posy-y)
			Print posx +" "+posy 
;Stop
	For i = 0 To division-1
		For j = 0 To division-1

			If ax/width = i And ay/height = j Then 
			;Print ax +" " +ay
;Stop
			;find the square: ij -> offset + size
			; divide the square: offset + suboffset (i +size/2)
			
				;If Not depth = 0 Then regiondraw(width, height, posx,posy, division,i,j, depth-1, divide+1)
				;If Not depth = 0 Then regionLod (width, height, posx, posy, division, depth-1)
		
			Else
				Oval x+i*width, y+j*height ,width,height, False
			EndIf

		Next
	Next

End Function


Function regionLod(width, height, posx, posy, division, depth=1)
	
	If width < division Then Return
	If height < division Then Return
	If division < division Then Return

;Print depth
	
	width = width/division
	height = height/division
	
	ax = ( posx/width ) * width
	ay = ( posy/height ) * height
	
	Oval ax, ay, width, height, False
	
	If Not depth = 0 Then regionLod (width, height, posx, posy, division, depth-1)

End Function 


Function regionPaint(width, height, posx, posy, division, x=0, y=0, depth=1)

division = 16

posx = (posx/division)*division
posy = (posy/division)*division

	For i = x To x+width Step 16;division
		For j = y To y+height Step 16;division
			
			c1# = Abs (posx - i)
			c2# = Abs (posy - j)
			t$ = c1 + "/" + c2
			
			;c0# = Sqr(width^2)
			
			
			;c3# = Sqr(c1^2 + c2^2)/1		;euclidian distance		(circle)
			c3# = max(c1,c2)				;chessboard distance	(square)
			;c3# = Abs((c1 + c2))			;manhattan 				(diamond)
			
			
			;c3 = Sqr(c3);/22.4
			c3 = c3/512
			;c3 = 2^c3
			c3 = Sqr(c3)
			c3 = c3*8/2^c3
			c3 = c3*48
			c3 = c3/32 +2
			
			c3 =  max(Floor (Log (Abs(posx - i))/Log(2) ),Floor ( Log (Abs(posy - j))/Log(2) ) )

			
			;Print c3
			Color c3, c3, c3
			Rect i,j, division, division
			Color 255-c3, 255-c3, 255-c3
			Text i,j, Int(c3)

			
			Color 000,255,255
			;Text posx, posy, c3
			;Print Int(c3)

		Next
	Next
	;Print "/-----------------------------------------------------------"
End Function 

.misc

Function BaseSetup3d()
	
	Graphics3D 800,600,16,2
	SetBuffer BackBuffer()
	
	;-------------------------------------------
	cam = CreateCamera ()
	PositionEntity cam, 0,0,-5
	
	l1 = CreateLight (1)
	RotateEntity l1, 45,45,0
	
	tex=LoadTexture( "testure.jpg" )
	
	plane = CreatePlane ()
	PositionEntity plane, 0,-8,0
	EntityColor plane, 64,32,16
	EntityTexture plane,tex
	;-------------------------------------------
	
End Function

Function BaseSetup2d()
	
	Graphics 800,600,16,2
	SetBuffer BackBuffer()
		
End Function


Function DisplayTest3D()

	While Not KeyDown(1)
	
		UpdateWorld 1
		RenderWorld 1
		VWait:Flip False

	Wend
	
	ClearWorld 
	End
End Function
